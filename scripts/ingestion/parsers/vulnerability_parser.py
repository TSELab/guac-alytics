#!/usr/bin/env python
import requests
from bs4 import BeautifulSoup
import sys
import os
# Get the absolute path of the parent directory
parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
# Add the parent directory to the Python path
sys.path.append(parent_dir)
from constants import NIST_URL, VULNERABILITY_URL

def parse_vulnerability_data(vulnerability_id):
    url = f"{NIST_URL}{vulnerability_id}"
    
    response = requests.get(url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # Find and extract the published date
        published_date_element = soup.find('span', {'data-testid': 'vuln-published-on'})
        published_date = published_date_element.text.strip() if published_date_element else None
        
        # Find and extract the last modified date
        last_modified_date_element = soup.find('span', {'data-testid': 'vuln-last-modified-on'})
        last_modified_date = last_modified_date_element.text.strip() if last_modified_date_element else None
        
        return published_date, last_modified_date
    
    return None, None

# Define the main parser function
def parser():
    # Check if the file exists locally, if not, download it
    response = requests.get(VULNERABILITY_URL)

        # Parse the data as JSON
    parsed_data = response.json()
    results = []
    for name, vulnerability in parsed_data.items():
        for cve, info in vulnerability.items():
            if 'description' in info:
                description = info['description']
            else:
                description="None"
            if 'debianbug' in info:
                debianbug = info['debianbug']
            else:
                debianbug="None"
            if 'scope' in info:
                scope = info['scope']
            else:
                scope="None"
            releases = info['releases']
            # print(f"{name}|{cve}|{description}|{debianbug}|{scope}|{releases}")
            # to insert records into the table
            published_date, last_modified_date = parse_vulnerability_data(cve)
            result = (name, cve, description,published_date, last_modified_date, debianbug, scope, releases)
            results.append(result)
    return results